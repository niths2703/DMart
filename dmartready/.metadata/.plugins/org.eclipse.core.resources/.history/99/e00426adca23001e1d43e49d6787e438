package com.dmartready.demo.configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

public class DemoSecurityConfig {

    public InMemoryUserDetailsManager userDetailsManager(){
    
    	UserDetails employee= User.builder()
                .username("employee")
                .password("{noop}test123")
                .roles("EMPLOYEE")
                .build();

        UserDetails admin= User.builder()
                .username("admin")
                .password("{noop}test123")
                .roles("EMPLOYEE","MANAGER")
                .build();
        
        return new InMemoryUserDetailsManager(employee,admin);
        
    }
    
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

        http.authorizeHttpRequests(configurer->
                configurer
                        .requestMatchers(HttpMethod.POST,"/api/stock/items").hasRole("EMPLOYEE")
                        .requestMatchers(HttpMethod.PUT,"/api/stock/items/{stockItemId}").hasRole("EMPLOYEE")
                        .requestMatchers(HttpMethod.DELETE,"/api/stock/items/{stockItemId}").hasRole("EMPLOYEE")
                        .requestMatchers(HttpMethod.POST,"/api/stock/items/move/{stockItemId}/{sourceLocationId}/{destinationLocationId}/{quantity}").hasRole("ADMIN")
                        .requestMatchers(HttpMethod.GET,"/api/stock/items/quantity/{storeLocationId}").hasRole("ADMIN")
        );


        //use HTTP Basic Authentication
        http.httpBasic(Customizer.withDefaults());

        //disable Cross Site Request Forgery (CSRF)
       

       http.csrf(csrf->csrf.disable());

        return http.build();
    }

}
